# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# culvert.py
# Created on: 2019-12-12 14:36:43.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: culvert <Cellsize> <Raster_Dataset_Name_with_Extension> 
# Description: 
# ---------------------------------------------------------------------------

'''
WELCOME TO OUR CODE!
IN ORDER TO MAKE THE CODE RUN FOR A SPECIFIC DEM, PLEASE CHECK THE FOLLOWING LINES:
35 - CELL SIZE. SET TO CELL SIZE OF DEM
37 - ORIGDEM. SET TO DEM FILE NAME IN DEFAULT GEODATABASE
215 - MOSAIC TO NEW RASTER. ADD PATH TO ORIGINAL DEM TO THE LIST OF FILES (LAST IN LIST!)

'''

# Import arcpy module
import arcpy
import numpy as np
from arcpy import env
from arcpy.sa import *
import math

mxd = arcpy.mapping.MapDocument("CURRENT")
dflist = arcpy.mapping.ListDataFrames(mxd)
df = dflist[0]
arcpy.env.addOutputsToMap = 0
arcpy.env.overwriteOutput = True


#Script arguments
#Change cellsize and outputname for each dem
Cellsize = 1
finaloutputname = "breachedDEM"+str(Cellsize)
origDEM = "Lidar1mS"
arcpy.env.mask= origDEM
culvertpointsnew = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\culvertpointsnew"
Szonepoint = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\Szonepoint"
Nzonepoint = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\Nzonepoint"
buffpoints = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\buffpoints"
firstzone = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\firstzone"
rasterNzone = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterNzone"
rasterSzone = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterSzone"
zonalstats = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\zonalstats"
zonalstats2 = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\zonalstats2"
rasterpixup = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterpixup"
rasterpointup = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterpointup"
rasterpointup2 = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterpointup2"
rasterpixdown = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterpixdown"
rasterpointdown = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\rasterpointdown"
RasterT_rasterc1 = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\RasterT_rasterc1"
Nzone = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\Nzone"
boolean = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\boolean"
Szone = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\Szone"
northCon ="C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\northCon"
finalupperpoint = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\finalupperpoint"
finallowerpoint = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\finallowerpoint"
interpolpoints = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\interpolpoints"
elevup = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\elevup"
newbuffpoints = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\newbuffpoints"

arcpy.env.snapRaster = origDEM

for lyr in arcpy.mapping.ListLayers(mxd, 'culvertpointsnew'):
    lyr_extent = lyr.getExtent()
    arcpy.env.extent = lyr_extent

if Cellsize == 20:
    arcpy.GraphicBuffer_analysis("buffpoints", "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\newbuffpoints", "10 Meter", "SQUARE")
    print "Extra large buffers made around buffpoints"
    
## PART FOR THE SELECTION OF NEW POINTS ##
zoneS = 1
zoneN = 2
for i in xrange(11):
    print "Data pair number " + str(i+1)    
    #Select polygon of southern zone
    query1 = "NUMBERID = "+str(zoneS)
    if Cellsize == 20:
        Szone = arcpy.Select_analysis(newbuffpoints, Szone, query1)
    else:
        Szone = arcpy.Select_analysis(buffpoints, Szone, query1)
        
    Szonepoint = arcpy.Select_analysis(culvertpointsnew, Szonepoint, query1)
    rasterSzone = arcpy.gp.ExtractByMask_sa(origDEM, Szone, rasterSzone)    
    Smin = arcpy.GetRasterProperties_management(rasterSzone, "MINIMUM")
    rasterSzonemin = Smin.getOutput(0)
    rasterSzonemin =  float(rasterSzonemin)
    print "South minimum"    
    print rasterSzonemin
    #Select polygon of northern zone
    query2 = "NUMBERID = "+str(zoneN)
    if Cellsize == 20:
        Nzone = arcpy.Select_analysis(newbuffpoints, Nzone, query2)
    else:
        Nzone = arcpy.Select_analysis(buffpoints, Nzone, query2)
    Nzonepoint = arcpy.Select_analysis(culvertpointsnew, Nzonepoint, query2)
    rasterNzone = arcpy.gp.ExtractByMask_sa(origDEM, Nzone, rasterNzone)
    Nmin = arcpy.GetRasterProperties_management(rasterNzone, "MINIMUM")
    rasterNzonemin = Nmin.getOutput(0)
    rasterNzonemin =  float(rasterNzonemin)
    print "North minimum" 
    print rasterNzonemin
    #Check the direction for the flow
    if rasterSzonemin < rasterNzonemin:
        upperRas = rasterNzone
        lowerRas = rasterSzone
        upperzone = Nzone
        uppername = "\"rasterNzone\""
        upperpoint = Nzonepoint
        lowerzone = Szone
        lowername = "\"rasterSzone\""
        lowerpoint = Szonepoint
    else:
        upperRas = rasterSzone
        lowerRas = rasterNzone
        upperzone = Szone
        uppername = "\"rasterSzone\""
        upperpoint = Szonepoint
        lowerzone = Nzone
        lowername = "\"rasterNzone\""
        lowerpoint = Szonepoint
    print "The upper zone is " + uppername +". The lower zone is "+lowername
    ### UPPER ZONE ###
    # Find maximum flow accumulation in upper zone
    flowdir = FlowDirection(origDEM, "NORMAL")
    flowdir.save("C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\flowdir")
    flowacc = FlowAccumulation(flowdir, "", "FLOAT")
    flowacc.save("C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\flowacc")
    # Zonal stats to find max accumulation in upper zone
    zonalstats = ZonalStatistics(upperzone, "ORIG_FID", flowacc, "MAXIMUM")
    zonalstats.save("C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\zonalstats")
    zonalNP = arcpy.RasterToNumPyArray("zonalstats")
    zonalval = str(np.max(zonalNP))
    #DEM values within zone and single pixel
    # query finds areas that are not equal to zonalstats (max acc value) and sets them to null
    query3 = "SetNull(\"flowacc\" != \"zonalstats\", \"zonalstats\")"
    rasterpixup = arcpy.gp.RasterCalculator_sa(query3, rasterpixup)
    rasterpointup2 = arcpy.RasterToPoint_conversion(rasterpixup, rasterpointup2, "VALUE")
    arcpy.gp.ExtractByMask_sa(origDEM, rasterpointup2, elevup)
    # convert elevup (1 pixel with elevation) to point and extract value
    rasterpointup = arcpy.RasterToPoint_conversion(elevup, rasterpointup, "VALUE")
    vallist = [r[0] for r in arcpy.da.SearchCursor (rasterpointup, ["grid_code"])]  
    elevint = max(vallist)    
    elevval = str(max(vallist))    
    print elevval

    ### LOWER ZONE ###
        #Find values smaller than the elevation of the max accumulation point of the upper zone (elevval)
    #Find of these values the maximum
    #Simpler method because of integer raster
    if Cellsize == 20:
		vallist2 = [r[0] for r in arcpy.da.SearchCursor (lowerRas, ["Value"])]
		cond = vallist2 <= elevint
		vallist3 = vallist2[cond]    
		if  type(vallist3) == int:
			zonalNP2 = int(vallist3)
			zonalNP2 = str(zonalNP2)
		else:
			zonalNP2 = str(max(vallist3))
		query5= "SetNull("+ lowername +" != "+ zonalNP2 + ", " + lowername +")"    
		rasterpixdown = arcpy.gp.RasterCalculator_sa(query5, rasterpixdown)
		rasterpointdown = arcpy.RasterToPoint_conversion(rasterpixdown, rasterpointdown, "VALUE")
    else:
        #More advanced method for lower spatial resolutions
	   query4 = "Con("+ lowername +" < " + elevval + ","+lowername+")"
	   northCon = arcpy.gp.RasterCalculator_sa(query4, "northCon")  
	   #Find of these values the maximum
	   zonalstats2 = ZonalStatistics(lowerzone, "ORIG_FID", northCon, "MAXIMUM")
	   zonalstats2.save("C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\zonalstats2")
	   query5= "SetNull("+ lowername +" != \"zonalstats2\", \"zonalstats2\")"    
	   rasterpixdown = arcpy.gp.RasterCalculator_sa(query5, rasterpixdown)
	   rasterpointdown = arcpy.RasterToPoint_conversion(rasterpixdown, rasterpointdown, "VALUE") 
		
    ### SELECT SINGLE PIXEL IN CASE THERE WERE SEVERAL CANDIDATES ###
    #Closest to middle of polygon   
    arcpy.ClearEnvironment("extent")    
    arcpy.Near_analysis(rasterpointup, upperpoint)
    arcpy.Near_analysis(rasterpointdown, lowerpoint)
    fields = "NEAR_DIST"
    
    distlist = [r[0] for r in arcpy.da.SearchCursor (rasterpointup, [fields])]  
    minimum = min(distlist)
    ceilmin = math.ceil(minimum)
    sqlExp = fields + " <= " + str(ceilmin)
    finalupperpoint =  arcpy.Select_analysis(rasterpointup, finalupperpoint, sqlExp)

    distlist2 = [r[0] for r in arcpy.da.SearchCursor (rasterpointdown, [fields])]
    minimum2 = min(distlist2)
    ceilmin2 = math.ceil(minimum2)
    sqlExp2 = fields + " <= " + str(ceilmin2)  
    finallowerpoint =  arcpy.Select_analysis(rasterpointdown, finallowerpoint, sqlExp2)
    iterationpoints = arcpy.Merge_management([finalupperpoint, finallowerpoint], interpolpoints+str(i)).getOutput(0) 
    layer = arcpy.management.MakeFeatureLayer(r"C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\interpolpoints"+str(i), "interpolpoints"+str(i)).getOutput(0)  
    arcpy.mapping.AddLayer(df, layer)   
    #find layer of point pair and set extent to this
    zoneS = int(zoneS)+ 2
    zoneN = int(zoneN)+ 2
    print "Loop " + str(i+1) + " finished."

### IDW PROCESS ### 
arcpy.env.extent = origDEM
    
for i in range(11):
    for lyr in arcpy.mapping.ListLayers(mxd, 'interpolpoints'+str(i)):
        #arcpy.ClearEnvironment("extent")
        # Process: Points To Line (2)
        inputname = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\interpolpoints"+str(i)
        outline = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\line"+str(i)
        arcpy.PointsToLine_management(inputname, outline, "", "", "NO_CLOSE")
        arcpy.env.mask = "C:\\TempData\\NewHydrologyproject\\DEMdata.gdb\\line"+str(i)
        #arcpy.env.cellSize = Cellsize        
        outputname = "C:\TempData\NewHydrologyproject\idw_interpol_" + str(i) + ".tif"
        arcpy.gp.Idw_sa(inputname, "grid_code", outputname, Cellsize, "1", "VARIABLE 2", "")
       
# Process: Mosaic To New Raster
DEMdata_gdb = "C:\\TempData\\NewHydrologyProject\\DEMdata.gdb"
arcpy.MosaicToNewRaster_management("C:\\TempData\\NewHydrologyProject\\idw_interpol_0.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_1.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_10.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_2.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_3.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_4.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_5.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_6.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_7.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_8.tif;C:\\TempData\\NewHydrologyProject\\idw_interpol_9.tif;C:\\TempData\\NewHydrologyProject\\DEMdata.gdb\\Lidar1mS", DEMdata_gdb, finaloutputname, "PROJCS['SWEREF99_TM',GEOGCS['GCS_SWEREF99',DATUM['D_SWEREF99',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',15.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "32_BIT_FLOAT", Cellsize, "1", "FIRST", "FIRST")
